# Calculate the number of cores and substract 2
number_cores <- detectCores() - 2
# cluster will only be able
b<-100
# create a cluster using 6 of my computer cores FORK in environmental variables
my.cluster <- makeCluster(number_cores,type="FORK")
# use parralel version of lapply (list to list)
my.list<-parLapply(my.cluster, 1:5,function(x) x+b)
#use parallel version of sapply (list to array)
my.vector<-parSapply(my.cluster,1:5,function(x) x+b)
# stop cluster and release resources
stopCluster(my.cluster)
print("my.list")
print(my.list)
print("my.vector")
print(my.vector)
# multiple ... arguments
the.funct<- function(i,j){i+j}
foreach(i=1:4, j=4:8) %do% the.funct(i,j)
library(foreach)
library(doParallel)
# multiple ... arguments
the.funct<- function(i,j){i+j}
foreach(i=1:4, j=4:8) %do% the.funct(i,j)
foreach(i=1:4, j=4:8,.combine=c) %do% the.funct(i,j)
library(foreach)
library(doParallel)
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
#run iteration over clusters
foreach(i=1:4,j=4:8,.combine = c)  %dopar%  the.funct(i,j)
# stop cluster and release resources
stopCluster(my.cluster)
# multiple ... arguments
the.funct<- function(i,j){i+j*k}
foreach(i=1:4, j=4:8,k=9:12) %do% the.funct(i,j)
foreach(i=1:4, j=4:8,k=9:12,.combine=c) %do% the.funct(i,j)
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
#run iteration over clusters
foreach(i=1:4,j=4:8,.combine = c)  %dopar%  the.funct(i,j)
# stop cluster and release resources
stopCluster(my.cluster)
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
#run iteration over clusters
foreach(i=1:4,j=4:8,k=9:12,.combine = c)  %dopar%  the.funct(i,j)
# stop cluster and release resources
stopCluster(my.cluster)
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
#run iteration over clusters
timeit(foreach(i=1:4,j=4:8,k=9:12,.combine = c)  %dopar%  the.funct(i,j))
library(foreach)
library(timeit)
install.packages("Smisc")
library(foreach)
library(Smisc)
library(doParallel)
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
#run iteration over clusters
timeit(foreach(i=1:4,j=4:8,k=9:12,.combine = c)  %dopar%  the.funct(i,j))
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
#run iteration over clusters
timeIt(foreach(i=1:4,j=4:8,k=9:12,.combine = c)  %dopar%  the.funct(i,j))
# stop cluster and release resources
stopCluster(my.cluster)
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
#run iteration over clusters
timeIt(foreach(i=1:4,j=4:8,k=9:12,.combine = c)  %dopar%  the.funct(i,j))
# stop cluster and release resources
stopCluster(my.cluster)
timeIt(foreach(i=1:4, j=4:8,k=9:12,.combine=c) %do% the.funct(i,j))
1;2
1;2
1:2
1:2 *100
timeIt(foreach(i=1:1000*20, j=1:1000*40,k=1:100,.combine=c) %do% the.funct(i,j))
timeIt(foreach(i=1:10000*20, j=1:10000*40,k=1:1000,.combine=c) %do% the.funct(i,j))
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
#run iteration over clusters
timeIt(foreach(i=1:10000*20, j=1:10000*40,k=1:1000,.combine = c)  %dopar%  the.funct(i,j))
# stop cluster and release resources
stopCluster(my.cluster)
# multiple ... arguments
the.funct<- function(i,j,k){i+j*k}
foreach(i=1:4, j=4:8,k=9:12) %do% the.funct(i,j)
# multiple ... arguments
the.funct<- function(i,j,k){i+j*k}
foreach(i=1:4, j=4:8,k=9:12) %do% the.funct(i,j,k)
timeIt(foreach(i=1:10000*20, j=1:10000*40,k=1:1000,.combine=c) %do% the.funct(i,j,k))
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
#run iteration over clusters
timeIt(foreach(i=1:10000*20, j=1:10000*40,k=1:1000,.combine = c)  %dopar%  the.funct(i,j,k))
# stop cluster and release resources
stopCluster(my.cluster)
timeIt(foreach(i=1:100000*20, j=1:100000*40,k=1:100000,.combine=c) %do% the.funct(i,j,k))
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
#run iteration over clusters
timeIt(foreach(i=1:100000*20, j=1:100000*40,k=1:100000,.combine = c)  %dopar%  the.funct(i,j,k))
# stop cluster and release resources
stopCluster(my.cluster)
cl
lapply(1:5, function(x) c(x+100,x+200,x+300))
library(parallel)
# Calculate the number of cores and substract 2
number_cores <- detectCores() - 2
library(foreach)
library(Smisc)
library(doParallel)
# multiple ... arguments
the.funct<- function(i,j,k){i+j*k}
foreach(i=1:4, j=4:8,k=9:12) %do% the.funct(i,j,k)
timeIt(foreach(i=1:100000*20, j=1:100000*40,k=1:100000,.combine=c) %do% the.funct(i,j,k))
detectCores()
my.cluster <- makeCluster(number_cores,type="FORK")
my.cluster
stopCluster(my.cluster)
my.cluster <- makeCluster(number_cores,type="FORK")
print my.cluster
print(my.cluster)
my.cluster
my.cluster$host
my.cluster$rank
my.cluster <- makeCluster(number_cores,type="FORK")
my.cluster
# stop cluster and release resources
stopCluster(my.cluster)
lapply(1:5, function(x) c(x+100,x+200,x+300))
sapply(1:5, function(x) c(x+100,x+200,x+300))
lapply(1:5, function(x) c(x+100,x+200,x+300))
sapply(1:3, function(x) c(x+100,x+200,x+300))
lapply(1:3, function(x) c(x+100,x+200,x+300))
sapply(1:3, function(x) c(x+100,x+200,x+300))
lapply(1:3, function(x) c(x+100,x+200,x+300))
sapply(1:3, function(x) c(x+100,x+200,x+300))
lapply(1:3, function(x) b+x)
b=100
lapply(1:3, function(x) b+x)
sapply(1:3, function(x) b+x)
b<-100
lapply(1:3, function(x) b+x)
sapply(1:3, function(x) b+x)
# multiple ... arguments
the.funct<- function(i,j,k){sin(i+j*k)}
timeIt(seq.output<-foreach(i=1:4, j=4:8,k=9:12,.combine=c) %do% the.funct(i,j,k))
library(foreach)
library(parallel)
library(Smisc)
library(doParallel)
library(iterators)
# multiple ... arguments
the.funct<- function(i,j,k){sin(i+j*k)}
timeIt(seq.output<-foreach(i=1:4, j=4:8,k=9:12,.combine=c) %do% the.funct(i,j,k))
print(seq.output)
# multiple ... arguments
max.val<-10^4
the.funct<- function(i,j,k){sin(i)+cos(i+pi)}
timeIt(seq.output<-foreach(i=1:max.val,.combine=c) %do% the.funct(i))
print(seq.output)
# multiple ... arguments
max.val<-10^4
the.funct<- function(i,j,k){sin(i)+cos(i+pi)}
timeIt(seq.output<-foreach(i=1:max.val,.combine=c) %do% the.funct(i))
# multiple ... arguments
max.val<-10^4
the.funct<- function(i,j,k){sin(i)+cos(i+pi)+tan(i*i)}
timeIt(seq.output<-foreach(i=1:max.val,.combine=c) %do% the.funct(i))
# multiple ... arguments
max.val<-10^4
the.funct<- function(i,j,k){sin(i)+cos(i+pi*i)+tan(i*i)}
timeIt(seq.output<-foreach(i=1:max.val,.combine=c) %do% the.funct(i))
# multiple ... arguments
max.val<-10^4
the.funct<- function(i,j,k){sin(i)+cos(i+pi*i)+tan(i*i+pi)}
timeIt(seq.output<-foreach(i=1:max.val,.combine=c) %do% the.funct(i))
# multiple ... arguments
max.val<-10^4
the.funct<- function(i,j,k){tan(sin(i)+cos(i+pi*i)+tan(i*i+pi))}
timeIt(seq.output<-foreach(i=1:max.val,.combine=c) %do% the.funct(i))
# multiple ... arguments
max.val<-10^
the.funct<- function(i,j,k){tan(sin(i)+cos(i+pi*i)+tan(i+2*pi))}
# multiple ... arguments
max.val<-10^
the.funct<- function(i,j,k){sin(i)+cos(i+pi*i)+tan(i+2*pi)}
# multiple ... arguments
max.val<-10^
the.funct<- function(i){sin(i)+cos(i+pi*i)+tan(i+2*pi)}
# multiple ... arguments
max.val<-10^5
the.funct<- function(i){sin(i)+cos(i+pi*i)+tan(i+2*pi)}
timeIt(seq.output<-foreach(i=1:max.val,.combine=c) %do% the.funct(i))
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#Calculate the number of cores and substract 2
number_cores <- detectCores() - 2
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
he.funct<- function(i){sin(i)+cos(i+pi*i)+tan(i+2*pi)}
timeIt(par.output<-foreach(i=1:max.val,.combine=c) %pardo% the.funct(i))
#Calculate the number of cores and substract 2
number_cores <- detectCores() - 2
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
he.funct<- function(i){sin(i)+cos(i+pi*i)+tan(i+2*pi)}
timeIt(par.output<-foreach(i=1:max.val,.combine=c) %dopar% the.funct(i))
# stop cluster and release resources
stopCluster(my.cluster)
print(par.output[3])
#Calculate the number of cores and substract 2
number_cores <- detectCores() - 2
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
the.funct<- function(i){sin(i)+cos(i+pi*i)+tan(i+2*pi)}
timeIt(par.output<-foreach(i=1:max.val,.combine=c) %dopar% the.funct(i))
# stop cluster and release resources
stopCluster(my.cluster)
print(par.output[3])
# multiple ... arguments
max.val<-10^4
the.funct<- function(i){sin(i)+cos(i+pi*i)+tan(i+2*pi)}
timeIt(seq.output<-foreach(i=1:max.val,.combine=c) %do% the.funct(i))
#Calculate the number of cores and substract 2
number_cores <- detectCores() - 2
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
the.funct<- function(i){sin(i)+cos(i+pi*i)+tan(i+2*pi)}
timeIt(par.output<-foreach(i=1:max.val,.combine=c) %dopar% the.funct(i))
# stop cluster and release resources
stopCluster(my.cluster)
print(par.output[3])
# multiple ... arguments
max.val<-10^4
the.funct<- function(i){sin(i)+cos(i+pi*i)+tan(i+2*pi)*[1:5]}
# multiple ... arguments
max.val<-10^4
the.funct<- function(i){sin(i)+cos(i+pi*i)+tan(i+2*pi)*1:5}
timeIt(seq.output<-foreach(i=1:max.val,.combine=c) %do% the.funct(i))
#Calculate the number of cores and substract 2
number_cores <- detectCores() - 2
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
the.funct<- function(i){sin(i)+cos(i+pi*i)+tan(i+2*pi)}
timeIt(par.output<-foreach(i=1:max.val,.combine=c) %dopar% the.funct(i))
# stop cluster and release resources
stopCluster(my.cluster)
print(par.output[3])
#Calculate the number of cores and substract 2
number_cores <- detectCores() - 2
#set up cluster: only fork on non-windows
my.cluster<-makeCluster(number_cores,type="FORK")
#register mycluster for %dopar%
registerDoParallel(my.cluster)
the.funct<- function(i){sin(i)+cos(i+pi*i)+tan(i+2*pi)*1:5}
timeIt(par.output<-foreach(i=1:max.val,.combine=c) %dopar% the.funct(i))
# stop cluster and release resources
stopCluster(my.cluster)
print(par.output[3])
table(pred)
require(e1071) #Holds the Naive Bayes Classifier
Train <- read.csv(file.choose())
Test <- read.csv(file.choose())
#Make sure the target variable is of a two-class classification problem only
levels(Train$Item_Fat_Content)
model <- naiveBayes(Item_Fat_Content~., data = Train)
class(model)
pred <- predict(model,Test)
table(pred)
require(e1071) #Holds the Naive Bayes Classifier
shiny::runApp('PetGit/ImputationClusterAnalysis/histshiny2')
runApp('PetGit/ImputationClusterAnalysis/histshiny2')
runApp('PetGit/ImputationClusterAnalysis/histshiny2')
shiny::runApp('PetGit/ImputationClusterAnalysis/histshiny2')
runApp('PetGit/ImputationClusterAnalysis/histshiny2')
runApp('PetGit/ImputationClusterAnalysis/histshiny2')
runApp('PetGit/ImputationClusterAnalysis/histshiny2')
runApp('PetGit/ImputationClusterAnalysis/histshiny2')
runApp('PetGit/ImputationClusterAnalysis/histshiny2')
runApp('PetGit/ImputationClusterAnalysis/histshiny2')
runApp('PetGit/ImputationClusterAnalysis/histshiny2')
runApp('PetGit/ImputationClusterAnalysis/histshiny2')
prop.sale
library(shiny)
library(ggplot2)
library(itertools2)
library(grid)
library(ggthemes)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
prop.sale.factor<-prop.sale.raw[,sapply(prop.sale.raw,is.factor)]
summary.prop<-summary(subset(prop.sale,select=-c(REID,sale.years)))
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(prop.sale,function(x){max(x,na.rm=TRUE)}))
my.diff<-max.vec-min.vec
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
my.index<-1:length(my.names)
#================================================================
library(shiny)
library(ggplot2)
library(itertools2)
library(grid)
library(ggthemes)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
prop.sale.factor<-prop.sale.raw[,sapply(prop.sale.raw,is.factor)]
summary.prop<-summary(subset(prop.sale,select=-c(REID,sale.years)))
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(prop.sale,function(x){max(x,na.rm=TRUE)}))
my.diff<-max.vec-min.vec
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
my.index<-1:length(my.names)
#================================================================
pwd()
setwd("~/PetGit/ImputationClusterAnalysis/histshiny2/)
library(shiny)
library(ggplot2)
library(itertools2)
library(grid)
library(ggthemes)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
prop.sale.factor<-prop.sale.raw[,sapply(prop.sale.raw,is.factor)]
summary.prop<-summary(subset(prop.sale,select=-c(REID,sale.years)))
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(prop.sale,function(x){max(x,na.rm=TRUE)}))
my.diff<-max.vec-min.vec
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
my.index<-1:length(my.names)
#================================================================
prop.sale<-cbind(prop.sale,prop.sale.factor)
library(shiny)
library(ggplot2)
library(itertools2)
library(grid)
library(ggthemes)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
prop.sale.factor<-prop.sale.raw[,sapply(prop.sale.raw,is.factor)]
summary.prop<-summary(subset(prop.sale,select=-c(REID,sale.years)))
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(prop.sale,function(x){max(x,na.rm=TRUE)}))
my.diff<-max.vec-min.vec
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
my.index<-1:length(my.names)
library(shiny)
library(ggplot2)
library(itertools2)
library(grid)
library(ggthemes)
prop.sale.raw<-readRDS("data/propsale.rds")
getwd()
setwd("~/PetGit/ImputationClusterAnalysis/histshiny2/")
getwd()
library(shiny)
library(ggplot2)
library(itertools2)
library(grid)
library(ggthemes)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
prop.sale.factor<-prop.sale.raw[,sapply(prop.sale.raw,is.factor)]
summary.prop<-summary(subset(prop.sale,select=-c(REID,sale.years)))
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(prop.sale,function(x){max(x,na.rm=TRUE)}))
my.diff<-max.vec-min.vec
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
my.index<-1:length(my.names)
#================================================================
prop.sale<-cbind(prop.sale,prop.sale.factor)
head(prop.sale)
dat.land<-subset(prop.sale,SALE_TYPE=="LAND & BLDG(S)")
dat.land
head(dat.land)
head(prop.sale)
dat.build<-subset(prop.sale,SALE_TYPE=="LAND ONLY")
head(dat.build)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat.both
library(shiny)
library(ggplot2)
library(itertools2)
library(grid)
library(ggthemes)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
prop.sale.factor<-prop.sale.raw[,sapply(prop.sale.raw,is.factor)]
prop.sale<-cbind(prop.sale,prop.sale.factor)
#Pregenerate data sets
#==============================================================
dat.build<-subset(prop.sale,SALE_TYPE=="LAND & BLDG(S)")
dat.land<-subset(prop.sale,SALE_TYPE=="LAND ONLY")
dat.both<-prop.sale
dat.both
head(dat.both)
dat.both[c(1,2,3,4)]
head(dat.both[1:4])
#===============================================================
num.dat<-dat.both[1:4]
min.vec<-unname(sapply(num.dat,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(num.dat,function(x){max(x,na.rm=TRUE)}))
my.diff<-max.vec-min.vec
my.names<-names(num.dat)
my.colors<-rainbow(length(my.names))
my.index<-1:length(my.names)
my.index
head(num.dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dati
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/PetGit/ImputationClusterAnalysis/")
setwd("~/PetGit/ImputationClusterAnalysis/tabplotshiny/")
runApp('tabplotApp.R')
runApp('tabplotApp.R')
install.packages("tabplot")
runApp('tabplotApp.R')
#readRDS("propsale.rds)
library(tabplot)
tableplot(prop.sale)
#readRDS("propsale.rds)
library(tabplot)
tableplot(prop.sale)
#readRDS("propsale.rds)
library(tabplot)
tableplot(prop.sale,select = c(BLDG_SIZE,PRICE,SALE_TYPE))
tableplot(prop.sale,select = c(PRICE,SALE_TYPE))
#readRDS("propsale.rds)
library(tabplot)
tableplot(prop.sale,select = c(PRICE,SALE_TYPE))
#readRDS("propsale.rds)
library(tabplot)
tableplot(prop.sale,select = c(PRICE,SALE_TYPE),sortCol = PRICE)
#readRDS("propsale.rds)
library(tabplot)
tableplot(iris, sortCol="Species")
#readRDS("propsale.rds)
library(tabplot)
tableplot(iris, sortCol="Sepal.Length")
