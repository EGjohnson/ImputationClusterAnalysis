shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.float(1)
as.numeric(1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(prop.sale)
prop.sale<-readRDS("data/propsale.rds")
names(prop.sale)
names(prop.sale)[2]
runApp()
rainbow(12)
runApp()
runApp()
head(prop.sale)
runApp()
runApp()
names(prop.sale)[5.0]
typeof(prop.sale)
typeof(prop.sale$BLDG_SIZE)
runApp()
runApp()
runApp()
head(prop.sale)
names(prop.sale)
names(prop.sale)[1]
names(prop.sale)[9]
runApp()
head(prop.sale)
prop.sale
typeof(prop.sale$BLDG_SIZE))
names(prop.sale)[9]
typeof(prop.sale$BLDG_SIZE))
names(prop.sale)
runApp()
runApp()
runApp()
runApp()
hist(prop.sale$BLDG_SIZE)
max(prop.sale$BLDG_SIZE)
min(prop.sale$BLDG_SIZE)
prop.sale$BLDG_SIZE
as.numeric(prop.sale$BLDG_SIZE)
runApp()
runApp()
runApp()
sort(prop.sale$BLDG_SIZE)
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
runApp()
runApp()
library(shiny)
library(ggplot2)
prop.sale<-readRDS("data/propsale.rds")
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
titlePanel("Property Value Histograms"),
# Sidebar layout with input and output definitions ----
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
#----------------------------------------------------------------------------------
selectInput('prop.col', 'Property Characteristic', c(""=7.0)),
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
sliderInput(inputId = "min.val",
label = "min value of histogram:",
min = 0,
max = 1.0,
value =0.0),
sliderInput(inputId = "max.val",
label = "max value of histogram:",
min = 0.0,
max = 1.0,
value =1.0)
),
#----------------------------------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Main panel for displaying outputs >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
titlePanel("Property Value Histograms"),
# Sidebar layout with input and output definitions ----
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
#----------------------------------------------------------------------------------
selectInput('prop.col', 'Property Characteristic', c(""=7.0)),
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
sliderInput(inputId = "min.val",
label = "min value of histogram:",
min = 0,
max = 1.0,
value =0.0),
sliderInput(inputId = "max.val",
label = "max value of histogram:",
min = 0.0,
max = 1.0,
value =1.0)
),
#----------------------------------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Main panel for displaying outputs >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
#figure out what the max and min values will be given the slider window
min.val.col<-reactive({max(prop.sale[,as.integer(input$prop.col)])*input$min.val})
max.val.col<-reactive({max(prop.sale[,as.integer(input$prop.col)])*input$max.val})
#subset the data frame to include only the range of the column we are interested in displaying
prop.sale.sub<-reactive({
prop.sale[prop.sale[,as.integer(input$prop.col)]>=min.val.col() &  prop.sale[,as.integer(input$prop.col)]<=max.val.col(), ]
})
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
ggplot(prop.sale.sub(),aes_string(my.names[as.integer(input$prop.col)])) +
geom_histogram(bins=input$bins,fill=my.colors[as.integer(input$prop.col)])+
xlim(c(min.val.col(),max.val.col()))+
ggtitle(typeof(input$prop.col))
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
titlePanel("Property Value Histograms"),
# Sidebar layout with input and output definitions ----
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
#----------------------------------------------------------------------------------
selectInput('prop.col', 'Property Characteristic', c(""=7.0)),
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
sliderInput(inputId = "min.val",
label = "min value of histogram:",
min = 0,
max = 1.0,
value =0.0),
sliderInput(inputId = "max.val",
label = "max value of histogram:",
min = 0.0,
max = 1.0,
value =1.0)
),
#----------------------------------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Main panel for displaying outputs >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
runApp()
min.vec<-sapply(prop.sale,1,min())
min.vec<-sapply(prop.sale,min())
min.vec<-min(prop.sale)
min.vec
prop.sale[,sapply(prop.sale, is.numeric)]
head(prop.sale[,sapply(prop.sale, is.numeric)])
prop.sale.num<-head(prop.sale[,sapply(prop.sale, is.numeric)])
#===============================================================
min.vec<-min(prop.sale.num)
max.vec<-max(prop.sale.num)
my.names<-names(prop.sale.num)
my.colors<-rainbow(length(my.names))
my.names
library(ggplot2)
prop.sale.raw<-readRDS("data/propsale.rds")
my.names<-names(prop.sale)
prop.sale<-head(prop.sale.raw[,sapply(prop.sale.raw, is.numeric)])
#===============================================================
min.vec<-min(prop.sale)
max.vec<-max(prop.sale)
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
my.names
runApp()
prop.sale.raw$PRICE
runApp()
runApp()
library(shiny)
library(ggplot2)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-head(prop.sale.raw[,sapply(prop.sale.raw, is.numeric)])
#===============================================================
min.vec<-min(prop.sale)
max.vec<-max(prop.sale)
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
runApp()
hist(prop.sale$PRICE)
is.na(prop.sale$PRICE)
dim(prop.sale.raw)
dim(prop.sale)
prop.sale<-prop.sale.raw[,vapply(prop.sale.raw, is.numeric)]
runApp()
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
runApp()
runApp()
max.vec
runApp()
runApp()
runApp()
runApp()
max.vec
library(shiny)
library(ggplot2)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
#===============================================================
min.vec<-min(prop.sale)
max.vec<-max(prop.sale)
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
max.vec
#===============================================================
min.vec<-sapply(prop.sale,max)
min.vec
#===============================================================
min.vec<-sapply(prop.sale,min)
max.vec<-sapply(prop.sale,max)
min.vec
max.vec
runApp()
prop.sale$YEAR_BUILT
#===============================================================
min.vec<-sapply(prop.sale,function(x){min(x,na.rm=TRUE)})
min.vec
#===============================================================
min.vec<-sapply(prop.sale,function(x){min(x,na.rm=TRUE)})
max.vec<-sapply(prop.sale,function(x){max(x,na.rm=TRUE)})
min.vec
max.vec
runApp()
runApp()
runApp()
names(max.vec)
library(shiny)
library(ggplot2)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
#===============================================================
min.vec<-sapply(prop.sale,function(x){min(x,na.rm=TRUE)})
max.vec<-sapply(prop.sale,function(x){max(x,na.rm=TRUE)})
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
runApp()
my.vec
min.vec
#===============================================================
min.vec<-uname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(prop.sale,function(x){max(x,na.rm=TRUE)}))
runApp()
runApp()
runApp()
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(prop.sale,function(x){max(x,na.rm=TRUE)}))
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
library(shiny)
library(ggplot2)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(prop.sale,function(x){max(x,na.rm=TRUE)}))
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
enumerate(my.names)
index(my.names)
index
library(iterators)
enumerate(my.names)
install.packages("itertools2")
library(itertools2)
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(prop.sale,function(x){max(x,na.rm=TRUE)}))
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
my.enumerate<-enumerate(my.names)
enumerate(iterable)
enumerate(my.names)
library(itertools2)
my.enumerated<-rbind(1:length(my.names),my.names)
my.enumerated
runApp()
runApp()
my.diff<-max.vec-min.vec
my.diff
runApp()
library(shiny)
library(ggplot2)
library(itertools2)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(prop.sale,function(x){max(x,na.rm=TRUE)}))
my.diff<-max.vec-min.vec
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
my.index<-1:length(my.names)
my.diff
runApp()
runApp()
runApp()
runApp()
head(prop.sale)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
library(itertools2)
library(grid)
library(ggthemes)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
prop.sale
summary(prop.sale)
summary(prop.sale)[1]
min.vec
summary(prop.sale)[1]
summary(prop.sale)
list(summary(prop.sale))
summary(prop.sale$YEAR_BUILT)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summary.prop<-summary(prop.sale)
summary.prop
runApp()
summary.prop<-summary(prop.sale[,-c("REID","sale.years")])
library(shiny)
library(ggplot2)
library(itertools2)
library(grid)
library(ggthemes)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
summary.prop<-summary(prop.sale[,-c("REID","sale.years")])
summary.prop<-summary(subset(prop.sale,select=-c("REID","sale.years")))
library(shiny)
library(ggplot2)
library(itertools2)
library(grid)
library(ggthemes)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
summary.prop<-summary(subset(prop.sale,select=-c("REID","sale.years")))
summary.prop<-summary(subset(prop.sale,select=-c(REID,sale.years)))
runApp()
prop.sale.raw
head(prop.sale.raw)
cbind(prop.sale,prop.sale.raw$SALE_TYPE)
head(cbind(prop.sale,prop.sale.raw$SALE_TYPE))
#================================================================
sale.type<-c(prop.sale.raw$SALE_TYPE)
prop.sale<-cbind(prop.sale,sale.type)
prop.sale
head(prop.sale)
prop.sale.raw
head(prop.sale.raw)
library(shiny)
library(ggplot2)
library(itertools2)
library(grid)
library(ggthemes)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
summary.prop<-summary(subset(prop.sale,select=-c(REID,sale.years)))
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(prop.sale,function(x){max(x,na.rm=TRUE)}))
my.diff<-max.vec-min.vec
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
my.index<-1:length(my.names)
#================================================================
prop.sale<-cbind(prop.sale,prop.sale.raw)
prop.sale
head(prop.sale.raw)
head(prop.sale)
prop.sale.factor<-prop.sale.raw[,sapply(prop.sale.raw,is.factor)]
head(prop.sale.factor)
runApp()
library(shiny)
library(ggplot2)
library(itertools2)
library(grid)
library(ggthemes)
prop.sale.raw<-readRDS("data/propsale.rds")
prop.sale<-prop.sale.raw[,sapply(prop.sale.raw, is.numeric)]
prop.sale.factor<-prop.sale.raw[,sapply(prop.sale.raw,is.factor)]
summary.prop<-summary(subset(prop.sale,select=-c(REID,sale.years)))
#===============================================================
min.vec<-unname(sapply(prop.sale,function(x){min(x,na.rm=TRUE)}))
max.vec<-unname(sapply(prop.sale,function(x){max(x,na.rm=TRUE)}))
my.diff<-max.vec-min.vec
my.names<-names(prop.sale)
my.colors<-rainbow(length(my.names))
my.index<-1:length(my.names)
#================================================================
prop.sale<-cbind(prop.sale,prop.sale.factor)
prop.sale
head(prop.sale)
runApp()
runApp()
runApp()
head(prop.sale)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
prop.sale<-subset(prop.sale,select=-c('SALE_TYPE'))
prop.sale$SALE_TYPE
atest<-prop.sale[,prop.sale$SALE_TYPE=="LAND & BLDG(S)"]
atest<-prop.sale[prop.sale$SALE_TYPE=="LAND & BLDG(S)",]
head(atest)
runApp()
runApp()
